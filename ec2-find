#!/bin/bash

function show_help() {
  echo "\
Usage: $(basename "$0") (--TAG_NAME [TAG_VALUE])*

Find EC2 instances by tag values and show concise, human-readable output.
Instances are matched if they contain all the given tags and values. Tag values
can be a partial match. If no tag name is specified then 'Name' tag is used. If
no value is specified for a tag then any value will be matched.

AWS CLI and JQ are required. AWS CLI default profile or environment
variables can be used to set AWS credentials."
}

color_enabled() {
  [[ "$use_color" == "yes" ]] && which tput > /dev/null
}

function red() {
  color_enabled && tput setaf 1
}

function green() {
  color_enabled && tput setaf 2
}

function bold() {
  color_enabled && tput bold
}

function reset() {
  color_enabled && tput sgr0
}

function describe_instances_cmd() {
  printf "%s" "aws ec2 describe-instances --filters "
  for ((i=1; i<=tag_count; i++)); do
    printf '"Name=tag:%s,Values=*%s*" ' "${tag_names[i]}" "${tag_values[i]}"
  done
}

function get_instances() {
  eval "$(describe_instances_cmd)"
}

function normalize_json() {
  jq -c '[.Reservations[] | .Instances[]] | map(
      {
        id: .InstanceId,
        ip: .PrivateIpAddress,
        name: ((.Tags[] | select(.Key == "Name")) // {}) | .Value,
        state: .State.Name
      }
    ) | sort_by(.name)[]'
}

state_color() {
  case "$1" in
    running)
      echo -n "$(green)"
    ;;
    stopped)
      echo -n "$(red)"
    ;;
  esac
}

format_string="%-7s %-11s %-15s %s\n"

function format_line() {
  local state
  state="$(echo "$1" | jq -r .state)"
  # shellcheck disable=SC2059
  printf "$(state_color "$state")${format_string}$(reset)" \
    "${state}" \
    "$(echo "$1" | jq -r .id)" \
    "$(echo "$1" | jq -r .ip)" \
    "$(echo "$1" | jq -r .name)"
}

function format_output() {
  # shellcheck disable=SC2059
  printf "$(bold)${format_string}$(reset)" "State" "Id" "Private IP" "Name"
  while read line; do
    format_line "$line"
  done
}

tag_names=()
tag_values=()
tag_count=0
use_color="yes"

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_help
      exit
    ;;
    --no-color)
      use_color="no"
    ;;
    --*)
      tag_count=$((tag_count + 1))
      tag_names[$tag_count]="${1#--}"
    ;;
    *)
      tag_values[$tag_count]="$1"
    ;;
  esac
  shift
done

if [[ "$tag_count" == "0" ]]; then
  tag_count=1
  tag_names[1]="Name"
  tag_values[1]="${tag_values[0]}"
fi

get_instances | normalize_json | format_output
